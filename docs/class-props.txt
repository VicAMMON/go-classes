= Служебные свойства классов и объектов

var TestClass = go.Class([AClass, BClass, CClass], props);
var instance  = new TestClass();


= props (свойства и методы класса)

__construct() - пользовательский конструктор, вызывается при инстанцировании класса
__destruct()  - пользовательский деструктор, вызывается из destroy()
__settings    - настройки класса (расширяют настройки предкового класса)
__abstract    - указание на абстрактный класс
__final       - указание на финальный класс
__classname   - имя класса (для красивого вывода)

= go.Class

go.Class.Root - корневой класс


= TestClass

classname - имя класса
prototype - собственно, прототип инстанцируемых объектов
settings  - настройки класса (формируются на основании настроек предка и props.__settings)
parent    - основной предок (в примере - AClass)
otherParents - список остальных предков ([BClass, CClass])
props     - объект с методами класса (аргумент, переданный в go.Class())
Fake      - фиктивный конструктор объектов класса (для создания прототипов и т.п.)
abstract  - указание на абстрактный класс
final     - указание на финальный класс
go$type   = "go.class"
isSubclassOf() - метод, проверяющий, является ли текущий класс наследником другого
__construct(this, ...)
__destruct(this)
__method(this, name, ...)

= TestClass.prototype

constuctor = TestClass (для сохранения цепочки constructor.prototype)
$self      - TestClass (указание на свой класс, для доступа из объектов по this.$self)

+ отфильтрованные методы из props
+ прототип __proto__ указывает на AClass.prototype


= instance - поля конкретного экземпляра


= go.Class.Root.prototype - прототип корневого класса, базовые реализации методов

__construct()
__destruct()
__parentConstruct(Class, ...)
__parentDestruct(Class)
__parentMethod(Class, methodName, ...)
destroy()
instance_of(Class)
toString()
go$type = "go.object"

